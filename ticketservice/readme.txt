This solution is a maven project that uses Spring for dependency injection. It also ships with a web app written on top of Spring MVC which can be run from directly form the command line using the jetty plugin. Please see  the how to run sections.Assumptions:1. There is only one venue with seats.2. Seats are numbered Sequentially. The Best seat is the one with the lowest seat id. i.e seat no 1 is better than seat no 2 and so on.3. All seats can be placed on hold and reserved with no exceptions. 4. Available seats are calculated as noOfTotalSeats SeatsReserved SeatsOnActiveHold.5. When the SeatHolds that are in Active expire they are purged from the system.6. System doesnot store change history. All unwanted items are removed when they are no longer required.7. Seats once reserved cannot be cancelled.8. Validation Errors cause an IllegalArgumentException. This occurs when    a.	When an value less than 1 is used as no of seats requested.    b.	When the noOf Seats Request exceeds the  available Seats..9. Validation of customer email is out of scope. System only handles edge cases as  null or empty.10. A SeatHoldExpiredException is thrown when the seat hold has not been reserved with in the expiry period.11. Properties such as the expiry time for seat holds is stored in AppConfig.properties  in src/main/resources. When deployed this will Spring will use this file from the classpath.12. The Seat Holds and reservations are not permanently stored. i.e there is storage is made in memory.  But since it uses Spring dependency injection a possible database implementation can be easily added by implementing the TicketingStore interface.
How to Run tests.From the commandline the tests can be run using the maven test goal using the default surefire plugin. To do  this: 		-  open command one go to the project root.  And run  			mvn -Dtest:* test.How to run the web app:The web app can be run in two ways.      1.	By using maven jetty plugin :      -	from command line Go to project root      -	Run  mvn jetty:run          This will deploy the app on port 8080 and can be accessed by opening a browser to http://localhost:8080/ticketservice      N.B.  To deploy using another port use             mvn ï¿½Djetty.port=xxx jetty:run                  2.	By building the app and deploying to a webserver:       To build the war file         i.	Go to project root  and form command line         Run:  mvn clean install       ii.	The above step will create a war file in the target folder which can be deployed to any JVM based web server eg. Tomcat.For more on running maven goals see https://maven.apache.org/run.html.